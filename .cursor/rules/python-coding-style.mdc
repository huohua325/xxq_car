---
globs: *.py
---

# Python代码规范（xxq_host）

## 代码风格

### 1. 基础规范
- 遵循 **PEP 8** 代码风格
- 使用 **4空格缩进**（不使用Tab）
- 行长度限制 **88字符**（Black格式化器标准）
- 使用 `snake_case` 命名变量和函数
- 使用 `PascalCase` 命名类

### 2. Docstring规范
所有公共函数和类必须包含docstring：

```python
def calculate_distance(x1: float, y1: float, x2: float, y2: float) -> float:
    """
    计算两点之间的欧几里得距离。
    
    Args:
        x1, y1: 第一个点的坐标（米）
        x2, y2: 第二个点的坐标（米）
    
    Returns:
        float: 两点间距离（米）
    
    Example:
        >>> calculate_distance(0, 0, 3, 4)
        5.0
    """
    return np.sqrt((x2 - x1)**2 + (y2 - y1)**2)
```

### 3. 类型注解
优先使用类型注解提高代码可读性：

```python
from typing import List, Tuple, Optional

def process_lidar(points: np.ndarray, pose: Tuple[float, float, float]) -> List[Tuple[float, float]]:
    """处理雷达数据"""
    pass
```

## 模块组织

### 导入顺序
```python
# 1. 标准库
import os
import sys
from typing import List

# 2. 第三方库
import numpy as np
import matplotlib.pyplot as plt

# 3. 本地模块
from src.slam.occupancy_map import OccupancyGridMap
from config import MAP_WIDTH, MAP_HEIGHT
```

### 配置参数使用
所有可配置参数必须从 [config.py](mdc:xxq_host/config.py) 导入，不要硬编码：

```python
# ✅ 正确
from config import WHEEL_BASE, WHEEL_RADIUS, MAP_RESOLUTION

# ❌ 错误
WHEEL_BASE = 0.2  # 不要硬编码
```

## 核心模块规范

### 1. SLAM模块 (`src/slam/`)
- **OccupancyGridMap**: 使用Log-odds贝叶斯更新
- **FrontierDetector**: 使用DBSCAN聚类
- 所有坐标统一使用 `(x, y)` 格式（米）
- 栅格索引使用 `(grid_x, grid_y)` 格式

### 2. Navigation模块 (`src/navigation/`)
- **PathPlanner**: A*算法 + Douglas-Peucker路径平滑
- **DWA**: 动态窗口避障，输出线速度和角速度
- **Controller**: 主控制循环，集成所有模块
- 速度单位: m/s（线速度）、rad/s（角速度）

### 3. Communication模块 (`src/communication/`)
- **RobotComm**: 串口通信（硬件连接）
- **RobotCommBLE**: 蓝牙通信（Windows）
- **Protocol**: 数据解析，严格遵循 [硬件通信协议](mdc:xxq_host/doc/硬件通信协议详细说明.md)
- 所有通信命令必须以 `\n` 结尾

## 错误处理

### 异常捕获
```python
import logging

logger = logging.getLogger(__name__)

try:
    data = comm.read_sensor_data()
except serial.SerialException as e:
    logger.error(f"串口通信错误: {e}")
    # 进行恢复操作
except ValueError as e:
    logger.warning(f"数据解析错误: {e}")
    # 跳过此数据
```

### 资源管理
使用上下文管理器确保资源正确释放：

```python
with RobotComm(port='COM5') as comm:
    comm.send_command('NAV', [1.0, 2.0, 90.0, 1.5])
```

## 测试规范

### 单元测试
- 测试文件命名: `test_<module>.py`
- 使用 `pytest` 框架
- 测试覆盖率目标: >80%

```python
# tests/test_slam.py
def test_occupancy_map_update():
    """测试占据栅格地图更新"""
    from src.slam.occupancy_map import OccupancyGridMap
    from config import MAP_WIDTH, MAP_HEIGHT, MAP_RESOLUTION
    
    map = OccupancyGridMap(MAP_WIDTH, MAP_HEIGHT, MAP_RESOLUTION)
    # ... 测试逻辑
    assert map is not None
```

### 运行测试
```bash
# 运行所有测试
pytest tests/ -v

# 运行特定模块测试
pytest tests/test_slam.py -v

# 生成覆盖率报告
pytest --cov=src tests/
```

## 性能优化

### NumPy优化
优先使用NumPy向量化操作替代循环：

```python
# ✅ 优化版本
distances = np.linalg.norm(points - robot_pos, axis=1)

# ❌ 低效版本
distances = [np.sqrt((p[0]-x)**2 + (p[1]-y)**2) for p in points]
```

### 可视化性能
- 目标帧率: 30-60 fps
- 使用 `plt.ion()` 启用交互模式
- 使用 `blitting` 技术加速地图更新

## 日志规范

```python
import logging

logger = logging.getLogger(__name__)

# 日志级别使用
logger.debug("详细调试信息")
logger.info("关键事件信息")
logger.warning("警告信息")
logger.error("错误信息")
```

## 文档规范

- 新功能必须更新相应文档
- API变更必须更新 [API文档.md](mdc:xxq_host/doc/plan/API文档.md)
- 重要算法添加详细注释和参考文献
